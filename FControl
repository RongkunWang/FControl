#!/usr/bin/env python3

import sys, string, random, os, fileinput

from PyQt5.QtWidgets import QApplication
from PyQt5 import QtCore
from PyQt5 import QtGui

from MainWindow import MainWindow

import signal

class Execute(QApplication):
    def __init__(self, *argv):
        QApplication.__init__(self, sys.argv)
        self._win = MainWindow()

        QtCore.QCoreApplication.instance().installEventFilter(self)
        #  self.installEventFilter(self)

        pass

    def eventFilter(self, target, event):
        # Esc to close
        if event.type() == QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Escape:
                #  print(target, event)
                self._win.closeEvent(event)
                # TODO: can be done better?
                return True
        return super(QApplication, self).eventFilter(target, event)

    #  def quit(self):
        #  print("app quit")
        #  #  self._win.quit()
        #  #  self._win = ""
        #  QApplication.quit()
        #  pass
        #  self._win.closeEvent()

if __name__ == '__main__':
    app = Execute(sys.argv)

    def sigint_handler(*args):
        print()
        print("Ctrl+C pressed, do nothing") 
        pass
    def sigquit_handler(*args):
        print()
        print("Press Ctrl+\, do nothing")
        #  print("Press Ctrl+/, send killing signal")
        #  QtCore.QCoreApplication.sendEvent(app, QtGui.QCloseEvent())
        pass

    signal.signal(signal.SIGINT,  sigint_handler)
    signal.signal(signal.SIGQUIT, sigquit_handler)
    timer = QtCore.QTimer()
    timer.start(100)
    timer.timeout.connect(lambda: None)
    sys.exit(app.exec_())
    pass
